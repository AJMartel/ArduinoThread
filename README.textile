h1. ArduinoThread

A simple way to run multiple stuff in Arduino.
This Library helps to maintain organized and to facilitate the use of multiple tasks.
NO, Arduino does not support "REAL" parallel threads, but, we can make use of this Class to improve our code, and easily schedule tasks with fixed (or variable) time between runs.
We can use Timers Interrupts, and make it really powerfull, running "pseudo-background" tasks on the rug.
For example, I personaly use it for all my projects, and put all sensor aquisition and filtering inside it, leaving the main loop, just for logic and "cool" part.

h2. Instalation

1. "Download":https://github.com/ivanseidel/ArduinoThread/archive/master.zip the Master branch from gitHub.
2. Unzip and modify the Folder name to "ArduinoThread" (Remove the '-master')
3. Paste the modified folder on your Library folder (On your @Libraries@ folder inside Sketchbooks or Arduino software).

h2. Getting Started

There are many examples showing many ways to use it. Here, we will explain Class itself, what it does and "how" it does.

There are basicaly, two Classes included in this Library:
@Thread@ and @ThreadController@ (that inherits from Thread).

- @Thread class@ := This is the basic class, witch contains methods to set and run callbacks, check if the Thread should be runned, and also creates a unique ThreadID on the instantiation.

- @ThreadController class@ := Responsable for "holding" multiple Threads. Can also be called as "a group of Threads", and is used to perform run in every Thread ONLY when needed.

* The instantiation of a Thread class is very simple:

pre. Thread myThread = Thread();
// or, if initializing a pointer
Thread* myThread = new Thread();


* Setting up a thread is essential. You can configure many things:

pre. myThread.enabled = true; // Default enabled value is true
myThread.setInterval(10); // Setts the wanted interval to be 10ms
thread.ThreadName = "myThread tag"; // This is useful for debugging

Ok, creating Threads are not so hard. But what do we do with them now?

* First, let's see how Threads should work, to understand what a @ThreadController@ is and does
pre. 


h3. TIPs and Warnings

* Prefer to use @Timer3@, @Timer4@ and @Timer5@ since they have no connection to hardware pins.

pre. Timer4.attatchInterrupt(handler).setFrequency(10).start();
// Is the same as:
Timer4.attatchInterrupt(handler);
Timer4.setFrequency(10);
Timer4.start();

pre. // To create a custom timer, refer to:
DueTimer myTimer = DueTimer(0); // Creates a Timer 0 object.
DueTimer myTimer = DueTimer(3); // Creates a Timer 3 object.
DueTimer myTimer = DueTimer(t); // Creates a Timer t object.
// Note: Maximum t allowed is 8, as there is only 9 timers [0..8];

pre. Timer1.setHandler(handler1).start(10);
Timer1.setHandler(handler2).start(10);
DueTimer myTimer = DueTimer(1);
myTimer.setHandler(handler3).start(20);
// Will run only handle3, on Timer 1 (You are just overriding the callback)

pre. Timer.getAvailable().attachInterrupt(callback1).start(10);
// Start timer on first available timer
DueTimer::getAvailable().attachInterrupt(callback2).start(10);
// Start timer on seccond available timer
// And so on...

h2. Library Reference

h3. You should know:

- @getAvailable()@ := Get the first available Timer.

- @attachInterrupt(void (*isr)())@ := Attach a interrupt (callback function) for the timer of the object.

- @detachInterrupt()@ := Detach current callback of timer.

- @start(long microseconds = -1)@ := Start the timer with an optional period parameter.

- @stop()@ := Stop the timer

- @setFrequency(long frequency)@ := Set the timer frequency

- @long getFrequency()@ := Get the timer frequency

- @setPeriod(long microseconds)@ := Set the timer period (in microseconds)

- @long getPeriod()@ := Get the timer period (in microseconds)

h3. You don't need to know:

- @int timer@ := Stores the object timer id (to acces Timers struct array).

- @DueTimer(int _timer)@ := Instantiate a new DueTimer object for Timer _timer (NOTE: All objects are already instantied!).

- @static const Timer Timers[]@ := Stores all timers information

- @static void (*callbacks[])()@ := Stores all callbacks for all timers


h2. Version History

* @1.2 (2013-30-03): Clock selection. Getters. getAvailable(). "AvailableTimer" Example.@
* @1.1 (2013-30-03): Added Timer6, Timer7, Timer8 (TC2).@
* @1.0 (2013-30-03): Original release.@

!https://d2weczhvl823v0.cloudfront.net/ivanseidel/DueTimer/trend.png(DueTimer)!
